-- Rank the customers based on the total amount they've spent on rentals
use mavenmovies;
select c.first_name,c.last_name,sum(p.amount) as total_amount, rank() over(order by sum(p.amount) desc) as ranking from customer as c join payment as p on c.customer_id=p.customer_id group by c.first_name,c.last_name order by total_amount desc;

-- Calculate the cumulative revenue generated by each film over time
WITH FilmCumulativeRevenue AS (
  SELECT
    f.film_id,
    p.payment_date,
    SUM(p.amount) OVER (PARTITION BY f.film_id ORDER BY p.payment_date) AS cumulative_revenue
  FROM
    film f
    JOIN inventory i ON f.film_id = i.film_id
    JOIN rental r ON i.inventory_id = r.inventory_id
    JOIN payment p ON r.rental_id = p.rental_id
)
SELECT
  fcr.film_id,
  MAX(f.title) AS title,
  MAX(fcr.cumulative_revenue) AS cumulative_revenue
FROM
  film f
  JOIN FilmCumulativeRevenue fcr ON f.film_id = fcr.film_id
GROUP BY
  fcr.film_id
ORDER BY
  fcr.film_id;
-- Determine the average rental duration for each film, considering films with similar lengths
select film_id,title,avg(rental_duration)as average_rental_duration, rank() over() from film group by rental_duration,film_id,title;
select film_id,title,length,avg(rental_duration)  over(partition by length) as average_rental_duration from film ;

-- Identify the top 3 films in each category based on their rental counts.
select f.film_id,f.title,count(r.rental_id) as rental_count, dense_rank() over(  order by count(r.rental_id) desc) as ranking from film as f  join inventory as i on f.film_id=i.film_id join rental as r on i.inventory_id=r.inventory_id group by f.film_id,f.title order by rental_count desc limit 3;

-- Calculate the difference in rental counts between each customer's total rentals and the average rentals across all customers
with difference as(
select c.customer_id,
count(rental_id) as total_rental,
avg(count(rental_id)) over() as average_rental
from customer as c join rental as r on c.customer_id=r.customer_id
group by c.customer_id
)
select customer_id,
total_rental,
average_rental,
(total_rental-average_rental) as difference
from difference;

-- Find the monthly revenue trend for the entire rental store over time.
 with calculus as(
select month(payment_date) as months,
customer_id,
sum(amount) over(partition by month(payment_date)) as monthly_amount from payment
),
filmy as(
select fi.rental_rate, r.customer_id from film as fi 
join inventory as i on fi.film_id=i.film_id 
join rental as r on i.inventory_id=r.inventory_id)
select ca.months,sum(ca.monthly_amount-fy.rental_rate) monthly_revenue from calculus as ca
join filmy as fy on ca.customer_id=fy.customer_id group by ca.months; 

-- Identify the customers whose total spending on rentals falls within the top 20% of all customers.
with customer_spending as (
select c.customer_id,first_name,last_name, sum(p.amount) as total_spending, percent_rank() over(order by sum(p.amount) desc)spending_rank 
from customer as c join payment as p on c.customer_id=p.customer_id group by c.customer_id,first_name,last_name)
select customer_id,first_name,last_name, total_spending from customer_spending where spending_rank<=0.2;

-- Calculate the running total of rentals per category, ordered by rental count.
select distinct count(rental_id) over (partition by fc.category_id) as rental_count,fc.category_id,cat.name from rental as r join inventory i on r.inventory_id=i.inventory_id
join film as f on i.film_id=f.film_id join film_category as fc on f.film_id=fc.film_id
join category as cat on fc.category_id=cat.category_id order by rental_count desc;

-- Find the films that have been rented less than the average rental count for their respective categories.
SELECT
  f.title,
  ca.name AS category_name
FROM
  film f
  JOIN inventory i ON f.film_id = i.film_id
  JOIN rental r ON i.inventory_id = r.inventory_id
  JOIN film_category fc ON f.film_id = fc.film_id
  JOIN category ca ON fc.category_id = ca.category_id
WHERE
  (
    SELECT COUNT(*) 
    FROM rental r2 
    JOIN inventory i2 ON r2.inventory_id = i2.inventory_id
    JOIN film_category fc2 ON i2.film_id = fc2.film_id
    WHERE fc2.category_id = fc.category_id
  ) < (
    SELECT AVG(rental_count) AS avg_rental_count
    FROM (
      SELECT COUNT(*) AS rental_count
      FROM rental r3
      JOIN inventory i3 ON r3.inventory_id = i3.inventory_id
      JOIN film_category fc3 ON i3.film_id = fc3.film_id
      WHERE fc3.category_id = fc.category_id
      GROUP BY r3.customer_id
    ) AS category_rentals
  );
  
  -- identify the top 5 months with the highest revenue and display the revenue generated in each month.
  with calculus as(
select month(payment_date) as months,
customer_id,
sum(amount) over(partition by month(payment_date)) as monthly_amount from payment
),
filmy as(
select fi.rental_rate, r.customer_id from film as fi 
join inventory as i on fi.film_id=i.film_id 
join rental as r on i.inventory_id=r.inventory_id)
select ca.months,sum(ca.monthly_amount-fy.rental_rate) monthly_revenue from calculus as ca
join filmy as fy on ca.customer_id=fy.customer_id group by ca.months limit 5; 

